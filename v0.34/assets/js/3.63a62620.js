(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{543:function(e,t,s){e.exports=s.p+"assets/img/v034_200node_latencies.5af51757.png"},544:function(e,t,s){e.exports=s.p+"assets/img/v034_latency_throughput.abf5276b.png"},545:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_mempool_size.1547b67c.png"},546:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_mempool_size_avg.dbe9c592.png"},547:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_peers.cfafb7ce.png"},548:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_rounds.1afde950.png"},549:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_heights.2f72536b.png"},550:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_total-txs.937c5a9e.png"},551:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_rss.21df354a.png"},552:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_rss_avg.7aa1aa90.png"},553:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_load1.b50767ff.png"},554:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_latencies_uniq.601e7d73.png"},555:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_heights.8d165a56.png"},556:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_heights_ephe.e1e85844.png"},557:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_total-txs.f28f74fc.png"},558:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_peers.bb8cbed6.png"},559:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_rss_avg.ee87336e.png"},560:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_load1.03b4867b.png"},600:function(e,t,s){e.exports=s.p+"assets/img/v034_r200c2_load-runner.c8f21989.png"},601:function(e,t,s){e.exports=s.p+"assets/img/v034_200node_latencies_zoomed.c9b8d118.png"},602:function(e,t,s){e.exports=s.p+"assets/img/v034_rotating_latencies.084a3774.png"},766:function(e,t,s){"use strict";s.r(t);var a=s(1),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"v0-34-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v0-34-x"}},[e._v("#")]),e._v(" v0.34.x")]),e._v(" "),a("h2",{attrs:{id:"_200-node-testnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_200-node-testnet"}},[e._v("#")]),e._v(" 200 Node Testnet")]),e._v(" "),a("h3",{attrs:{id:"finding-the-saturation-point"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finding-the-saturation-point"}},[e._v("#")]),e._v(" Finding the Saturation Point")]),e._v(" "),a("p",[e._v("The first goal when examining the results of the tests is identifying the saturation point.\nThe saturation point is a setup with a transaction load big enough to prevent the testnet\nfrom being stable: the load runner tries to produce slightly more transactions than can\nbe processed by the testnet.")]),e._v(" "),a("p",[e._v("The following table summarizes the results for v0.34.x, for the different experiments\n(extracted from file "),a("a",{attrs:{href:"./img/v034_report_tabbed.txt"}},[a("code",[e._v("v034_report_tabbed.txt")])]),e._v(").")]),e._v(" "),a("p",[e._v("The X axis of this table is "),a("code",[e._v("c")]),e._v(", the number of connections created by the load runner process to the target node.\nThe Y axis of this table is "),a("code",[e._v("r")]),e._v(", the rate or number of transactions issued per second.")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),e._v(" "),a("th",{staticStyle:{"text-align":"right"}},[e._v("c=1")]),e._v(" "),a("th",{staticStyle:{"text-align":"right"}},[e._v("c=2")]),e._v(" "),a("th",{staticStyle:{"text-align":"right"}},[e._v("c=4")])])]),e._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("r=25")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("2225")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("4450")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("8900")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("r=50")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("4450")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("8900")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("17800")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("r=100")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("8900")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("17800")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("35600")])]),e._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[e._v("r=200")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("17800")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("35600")]),e._v(" "),a("td",{staticStyle:{"text-align":"right"}},[e._v("38660")])])])]),e._v(" "),a("p",[e._v("The table shows the number of 1024-byte-long transactions that were produced by the load runner,\nand processed by Tendermint, during the 90 seconds of the experiment's duration.\nEach cell in the table refers to an experiment with a particular number of websocket connections ("),a("code",[e._v("c")]),e._v(")\nto a chosen validator, and the number of transactions per second that the load runner\ntries to produce ("),a("code",[e._v("r")]),e._v("). Note that the overall load that the tool attempts to generate is $c \\cdot r$.")]),e._v(" "),a("p",[e._v("We can see that the saturation point is beyond the diagonal that spans cells")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("r=200,c=2")])]),e._v(" "),a("li",[a("code",[e._v("r=100,c=4")])])]),e._v(" "),a("p",[e._v("given that the total transactions should be close to the product of the rate, the number of connections,\nand the experiment time (89 seconds, since the last batch never gets sent).")]),e._v(" "),a("p",[e._v("All experiments below the saturation diagonal ("),a("code",[e._v("r=200,c=4")]),e._v(") have in common that the total\nnumber of transactions processed is noticeably less than the product $c \\cdot r \\cdot 89$,\nwhich is the expected number of transactions when the system is able to deal well with the\nload.\nWith "),a("code",[e._v("r=200,c=4")]),e._v(", we obtained 38660 whereas the theoretical number of transactions should\nhave been $200 \\cdot 4 \\cdot 89 = 71200$.")]),e._v(" "),a("p",[e._v("At this point, we chose an experiment at the limit of the saturation diagonal,\nin order to further study the performance of this release.\n"),a("strong",[e._v("The chosen experiment is "),a("code",[e._v("r=200,c=2")])]),e._v(".")]),e._v(" "),a("p",[e._v("This is a plot of the CPU load (average over 1 minute, as output by "),a("code",[e._v("top")]),e._v(") of the load runner for "),a("code",[e._v("r=200,c=2")]),e._v(",\nwhere we can see that the load stays close to 0 most of the time.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(600),alt:"load-load-runner"}})]),e._v(" "),a("h3",{attrs:{id:"examining-latencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examining-latencies"}},[e._v("#")]),e._v(" Examining latencies")]),e._v(" "),a("p",[e._v("The method described "),a("RouterLink",{attrs:{to:"/qa/method.html"}},[e._v("here")]),e._v(" allows us to plot the latencies of transactions\nfor all experiments.")],1),e._v(" "),a("p",[a("img",{attrs:{src:s(543),alt:"all-latencies"}})]),e._v(" "),a("p",[e._v("As we can see, even the experiments beyond the saturation diagonal managed to keep\ntransaction latency stable (i.e. not constantly increasing).\nOur interpretation for this is that contention within Tendermint was propagated,\nvia the websockets, to the load runner,\nhence the load runner could not produce the target load, but a fraction of it.")]),e._v(" "),a("p",[e._v("Further examination of the Prometheus data (see below), showed that the mempool contained many transactions\nat steady state, but did not grow much without quickly returning to this steady state. This demonstrates\nthat the transactions were able to be processed by the Tendermint network at least as quickly as they\nwere submitted to the mempool. Finally, the test script made sure that, at the end of an experiment, the\nmempool was empty so that all transactions submitted to the chain were processed.")]),e._v(" "),a("p",[e._v("Finally, the number of points present in the plot appears to be much less than expected given the\nnumber of transactions in each experiment, particularly close to or above the saturation diagonal.\nThis is a visual effect of the plot; what appear to be points in the plot are actually potentially huge\nclusters of points. To corroborate this, we have zoomed in the plot above by setting (carefully chosen)\ntiny axis intervals. The cluster shown below looks like a single point in the plot above.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(601),alt:"all-latencies-zoomed"}})]),e._v(" "),a("p",[e._v("The plot of latencies can we used as a baseline to compare with other releases.")]),e._v(" "),a("p",[e._v("The following plot summarizes average latencies versus overall throughputs\nacross different numbers of WebSocket connections to the node into which\ntransactions are being loaded.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(544),alt:"latency-vs-throughput"}})]),e._v(" "),a("h3",{attrs:{id:"prometheus-metrics-on-the-chosen-experiment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus-metrics-on-the-chosen-experiment"}},[e._v("#")]),e._v(" Prometheus Metrics on the Chosen Experiment")]),e._v(" "),a("p",[e._v("As mentioned "),a("a",{attrs:{href:"#finding-the-saturation-point"}},[e._v("above")]),e._v(", the chosen experiment is "),a("code",[e._v("r=200,c=2")]),e._v(".\nThis section further examines key metrics for this experiment extracted from Prometheus data.")]),e._v(" "),a("h4",{attrs:{id:"mempool-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mempool-size"}},[e._v("#")]),e._v(" Mempool Size")]),e._v(" "),a("p",[e._v("The mempool size, a count of the number of transactions in the mempool, was shown to be stable and homogeneous\nat all full nodes. It did not exhibit any unconstrained growth.\nThe plot below shows the evolution over time of the cumulative number of transactions inside all full nodes' mempools\nat a given time.\nThe two spikes that can be observed correspond to a period where consensus instances proceeded beyond the initial round\nat some nodes.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(545),alt:"mempool-cumulative"}})]),e._v(" "),a("p",[e._v("The plot below shows evolution of the average over all full nodes, which oscillates between 1500 and 2000\noutstanding transactions.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(546),alt:"mempool-avg"}})]),e._v(" "),a("p",[e._v("The peaks observed coincide with the moments when some nodes proceeded beyond the initial round of consensus (see below).")]),e._v(" "),a("h4",{attrs:{id:"peers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peers"}},[e._v("#")]),e._v(" Peers")]),e._v(" "),a("p",[e._v("The number of peers was stable at all nodes.\nIt was higher for the seed nodes (around 140) than for the rest (between 21 and 74).\nThe fact that non-seed nodes reach more than 50 peers is due to #9548.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(547),alt:"peers"}})]),e._v(" "),a("h4",{attrs:{id:"consensus-rounds-per-height"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consensus-rounds-per-height"}},[e._v("#")]),e._v(" Consensus Rounds per Height")]),e._v(" "),a("p",[e._v("Most heights took just one round, but some nodes needed to advance to round 1 at some point.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(548),alt:"rounds"}})]),e._v(" "),a("h4",{attrs:{id:"blocks-produced-per-minute-transactions-processed-per-minute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks-produced-per-minute-transactions-processed-per-minute"}},[e._v("#")]),e._v(" Blocks Produced per Minute, Transactions Processed per Minute")]),e._v(" "),a("p",[e._v("The blocks produced per minute are the slope of this plot.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(549),alt:"heights"}})]),e._v(" "),a("p",[e._v("Over a period of 2 minutes, the height goes from 530 to 569.\nThis results in an average of 19.5 blocks produced per minute.")]),e._v(" "),a("p",[e._v("The transactions processed per minute are the slope of this plot.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(550),alt:"total-txs"}})]),e._v(" "),a("p",[e._v("Over a period of 2 minutes, the total goes from 64525 to 100125 transactions,\nresulting in 17800 transactions per minute. However, we can see in the plot that\nall transactions in the load are processed long before the two minutes.\nIf we adjust the time window when transactions are processed (approx. 105 seconds),\nwe obtain 20343 transactions per minute.")]),e._v(" "),a("h4",{attrs:{id:"memory-resident-set-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-resident-set-size"}},[e._v("#")]),e._v(" Memory Resident Set Size")]),e._v(" "),a("p",[e._v("Resident Set Size of all monitored processes is plotted below.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(551),alt:"rss"}})]),e._v(" "),a("p",[e._v("The average over all processes oscillates around 1.2 GiB and does not demonstrate unconstrained growth.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(552),alt:"rss-avg"}})]),e._v(" "),a("h4",{attrs:{id:"cpu-utilization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-utilization"}},[e._v("#")]),e._v(" CPU utilization")]),e._v(" "),a("p",[e._v("The best metric from Prometheus to gauge CPU utilization in a Unix machine is "),a("code",[e._v("load1")]),e._v(",\nas it usually appears in the\n"),a("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/load-average-in-linux",target:"_blank",rel:"noopener noreferrer"}},[e._v("output of "),a("code",[e._v("top")]),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[a("img",{attrs:{src:s(553),alt:"load1"}})]),e._v(" "),a("p",[e._v("It is contained in most cases below 5, which is generally considered acceptable load.")]),e._v(" "),a("h3",{attrs:{id:"test-result"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-result"}},[e._v("#")]),e._v(" Test Result")]),e._v(" "),a("p",[a("strong",[e._v("Result: N/A")]),e._v(" (v0.34.x is the baseline)")]),e._v(" "),a("p",[e._v("Date: 2022-10-14")]),e._v(" "),a("p",[e._v("Version: 3ec6e424d6ae4c96867c2dcf8310572156068bb6")]),e._v(" "),a("h2",{attrs:{id:"rotating-node-testnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rotating-node-testnet"}},[e._v("#")]),e._v(" Rotating Node Testnet")]),e._v(" "),a("p",[e._v("For this testnet, we will use a load that can safely be considered below the saturation\npoint for the size of this testnet (between 13 and 38 full nodes): "),a("code",[e._v("c=4,r=800")]),e._v(".")]),e._v(" "),a("p",[e._v("N.B.: The version of Tendermint used for these tests is affected by #9539.\nHowever, the reduced load that reaches the mempools is orthogonal to functionality\nwe are focusing on here.")]),e._v(" "),a("h3",{attrs:{id:"latencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#latencies"}},[e._v("#")]),e._v(" Latencies")]),e._v(" "),a("p",[e._v("The plot of all latencies can be seen in the following plot.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(602),alt:"rotating-all-latencies"}})]),e._v(" "),a("p",[e._v("We can observe there are some very high latencies, towards the end of the test.\nUpon suspicion that they are duplicate transactions, we examined the latencies\nraw file and discovered there are more than 100K duplicate transactions.")]),e._v(" "),a("p",[e._v("The following plot shows the latencies file where all duplicate transactions have\nbeen removed, i.e., only the first occurrence of a duplicate transaction is kept.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(554),alt:"rotating-all-latencies-uniq"}})]),e._v(" "),a("p",[e._v("This problem, existing in "),a("code",[e._v("v0.34.x")]),e._v(", will need to be addressed, perhaps in the same way\nwe addressed it when running the 200 node test with high loads: increasing the "),a("code",[e._v("cache_size")]),e._v("\nconfiguration parameter.")]),e._v(" "),a("h3",{attrs:{id:"prometheus-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prometheus-metrics"}},[e._v("#")]),e._v(" Prometheus Metrics")]),e._v(" "),a("p",[e._v("The set of metrics shown here are less than for the 200 node experiment.\nWe are only interested in those for which the catch-up process (blocksync) may have an impact.")]),e._v(" "),a("h4",{attrs:{id:"blocks-and-transactions-per-minute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks-and-transactions-per-minute"}},[e._v("#")]),e._v(" Blocks and Transactions per minute")]),e._v(" "),a("p",[e._v("Just as shown for the 200 node test, the blocks produced per minute are the gradient of this plot.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(555),alt:"rotating-heights"}})]),e._v(" "),a("p",[e._v("Over a period of 5229 seconds, the height goes from 2 to 3638.\nThis results in an average of 41 blocks produced per minute.")]),e._v(" "),a("p",[e._v("The following plot shows only the heights reported by ephemeral nodes\n(which are also included in the plot above). Note that the "),a("em",[e._v("height")]),e._v(" metric\nis only showed "),a("em",[e._v("once the node has switched to consensus")]),e._v(", hence the gaps\nwhen nodes are killed, wiped out, started from scratch, and catching up.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(556),alt:"rotating-heights-ephe"}})]),e._v(" "),a("p",[e._v("The transactions processed per minute are the gradient of this plot.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(557),alt:"rotating-total-txs"}})]),e._v(" "),a("p",[e._v("The small lines we see periodically close to "),a("code",[e._v("y=0")]),e._v(" are the transactions that\nephemeral nodes start processing when they are caught up.")]),e._v(" "),a("p",[e._v("Over a period of 5229 minutes, the total goes from 0 to 387697 transactions,\nresulting in 4449 transactions per minute. We can see some abrupt changes in\nthe plot's gradient. This will need to be investigated.")]),e._v(" "),a("h4",{attrs:{id:"peers-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peers-2"}},[e._v("#")]),e._v(" Peers")]),e._v(" "),a("p",[e._v("The plot below shows the evolution in peers throughout the experiment.\nThe periodic changes observed are due to the ephemeral nodes being stopped,\nwiped out, and recreated.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(558),alt:"rotating-peers"}})]),e._v(" "),a("p",[e._v("The validators' plots are concentrated at the higher part of the graph, whereas the ephemeral nodes\nare mostly at the lower part.")]),e._v(" "),a("h4",{attrs:{id:"memory-resident-set-size-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-resident-set-size-2"}},[e._v("#")]),e._v(" Memory Resident Set Size")]),e._v(" "),a("p",[e._v("The average Resident Set Size (RSS) over all processes seems stable, and slightly growing toward the end.\nThis might be related to the increased in transaction load observed above.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(559),alt:"rotating-rss-avg"}})]),e._v(" "),a("p",[e._v("The memory taken by the validators and the ephemeral nodes (when they are up) is comparable.")]),e._v(" "),a("h4",{attrs:{id:"cpu-utilization-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-utilization-2"}},[e._v("#")]),e._v(" CPU utilization")]),e._v(" "),a("p",[e._v("The plot shows metric "),a("code",[e._v("load1")]),e._v(" for all nodes.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(560),alt:"rotating-load1"}})]),e._v(" "),a("p",[e._v("It is contained under 5 most of the time, which is considered normal load.\nThe purple line, which follows a different pattern is the validator receiving all\ntransactions, via RPC, from the load runner process.")]),e._v(" "),a("h3",{attrs:{id:"test-result-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-result-2"}},[e._v("#")]),e._v(" Test Result")]),e._v(" "),a("p",[a("strong",[e._v("Result: N/A")])]),e._v(" "),a("p",[e._v("Date: 2022-10-10")]),e._v(" "),a("p",[e._v("Version: a28c987f5a604ff66b515dd415270063e6fb069d")])])}),[],!1,null,null,null);t.default=n.exports}}]);